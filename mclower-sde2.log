# #use "cmeans.caml";;
val difference : float list * float list -> float list = <fun>
val square : float list -> float list = <fun>
val sum : float list -> float = <fun>
val distanceR2 : float list * float list -> float = <fun>
val distanceSqAllMeans : float list * float list -> float list = <fun>
val getMin : 'a list -> 'a = <fun>
val getTailLength : 'a list * 'a -> int = <fun>
val listMinPos : 'a list -> int = <fun>
val elsum : float list * float list -> float list = <fun>
val scaleList : float list * int -> float list = <fun>
val zeroes : int -> float list = <fun>
val zeroMeansSet : int * int -> float list list = <fun>
val zeroVdiff : 'a list * 'a list -> bool = <fun>
val zeroSetDiff : 'a list list * 'a list list -> bool = <fun>
val zeroCounts : int -> int list = <fun>
val updateCounts : int * int list -> int list = <fun>
val updateMeansSum : float list * int * float list list -> float list list =
  <fun>
val formNewMeans : float list list * int list -> float list = <fun>
val reclassify :
  float list list * float list * float list list * 'a -> float list list =
  <fun>
val cmeans : 'a * 'b * 'c -> float list = <fun>
# #use "testh.caml";;
val h : float list list =
  [[47.698002; 62.48]; [-49.005001; -41.327999]; [45.958; 29.403];
   [-60.546001; -50.702]; [45.403; 52.994999]; [-49.021; -52.053001];
   [29.788; 58.993]; [-40.433998; -36.362999]]
# #use "inputs.caml";;
val h : float list list =
  [[47.698002; 62.48]; [-49.005001; -41.327999]; [45.958; 29.403];
   [-60.546001; -50.702]; [45.403; 52.994999]; [-49.021; -52.053001];
   [29.788; 58.993]; [-40.433998; -36.362999]; [30.247; 46.307999];
   [-56.348; -68.390999]; [39.306; 55.344002]; [-36.924999; -62.708];
   [67.416; 44.914001]; [-58.917999; -59.022999]; [61.311001; 49.091];
   [-48.459999; -48.293999]; [40.199001; 42.499001];
   [-44.012001; -45.372002]; [56.061001; 42.375]; [-41.471001; -61.914001];
   [38.374001; 69.296997]; [-72.792999; -38.757999]; [45.792999; 45.402];
   [-49.188; -26.427]; [52.728001; 47.167]; [-32.636002; -48.605];
   [45.199001; 42.932999]; [-60.687; -62.403]; [47.764999; 46.527];
   [-44.400002; -56.611]; [34.199001; 38.139999]; [-46.271; -59.549999];
   [30.365999; 34.556999]; [-44.353001; -35.251999]; [61.408001; 49.321999];
   [-54.328999; -57.067001]; [44.124001; 53.855999];
   [-40.675999; -45.154999]; [59.542999; 52.754002];
   [-51.820999; -54.581001]; [57.674999; 43.550999];
   [-58.657001; -62.026001]; [46.997002; 49.679001]; [-48.159; -60.401001];
   [58.990002; 44.98]; [-53.952; -48.452999]; [51.668999; 46.544998];
   [-44.797001; -39.198002]; [21.613001; 58.493999];
   [-39.870998; -70.129997]; [38.344002; 64.382004];
   [-36.939999; -49.074001]; [43.955002; 70.141998];
   [-66.225998; -39.280998]; [34.042; 43.935001]; [-56.077999; -41.220001];
   [40.556999; 60.946999]; [-45.368; -55.077999]; [51.587002; 54.707001];
   [-44.653999; -59.618999]; [45.764; 67.897003]; [-53.721001; -41.657001];
   [48.812; 30.231001]; [-51.667999; -59.210999]; [28.068001; 50.791];
   [-52.210999; -44.290001]; [39.919998; 60.792999];
   [-66.524002; -65.376999]; [51.550999; 55.782001]; [-71.337997; -50.605];
   [44.178001; 32.618]; [-50.681; -67.092003]; [56.460999; 46.509998];
   [-57.506001; -40.686001]; [46.271999; 59.300999];
   [-47.286999; -61.171001]; [51.985001; 46.272999];
   [-53.939999; -48.959999]; [40.096001; 61.334]; [-46.508999; -32.176998];
   [46.028999; 53.800999]; [-47.521999; -56.674]; [58.344002; 35.938999];
   [-41.748001; -48.055]; [66.002998; 50.168999]; [-54.241001; -50.398998];
   [63.778999; 46.206001]; [-39.025002; -54.013]; [44.758999; 46.389999];
   [-65.059998; -48.220001]; [62.169998; 53.400002]; [-48.84; -72.205002];
   [40.101002; 44.834]; [-61.758999; -54.951]; [44.448002; 58.359001];
   [-30.67; -65.568001]; [48.205002; 39.977001]; [-61.874001; -62.702];
   [53.289001; 53.289001]; [-57.244999; ...]; ...]
# let v1 =[1.0;2.0;3.0];;
val v1 : float list = [1.; 2.; 3.]
# let v2=[3.0;2.0;1.0];;
val v2 : float list = [3.; 2.; 1.]
# let v3=[1.0;1.0;1.0];;
val v3 : float list = [1.; 1.; 1.]
# distanceR2(v1,v3);;
- : float = 5.
# distanceR2(v1,v2);;
- : float = 8.
# let testv = [45.958; 29.403];;
val testv : float list = [45.958; 29.403]
# distanceSqAllMeans(testv,h);;
Error: This expression has type float list list
       but an expression was expected of type float list
       Type float list is not compatible with type float 
# elsum([1.2;3.4;5.6;],[6.5;5.4;4.3;]);;
- : float list = [7.7; 8.8; 9.89999999999999858]
# scaleList([1.0;2.0;3.0],10);;
- : float list = [0.1; 0.2; 0.3]
# scaleList([1.2;3.4;5.6],0);;
- : float list = [1.2; 3.4; 5.6]
# zeroes(10);;
- : float list = [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.]
# zeroes(2);;
- : float list = [0.; 0.]
# zeroMeansSet(4,5);;
- : float list list =
[[0.; 0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.]]
# zeroMeansSet(2,3);;
- : float list list = [[0.; 0.; 0.]; [0.; 0.; 0.]]
# zeroVdiff([1.0;2.0;3.0],[1.0;2.0;3.0]);;
- : bool = true
# zeroVdiff([1.0;2.0;3.0],[1.0;0.0;3.0]);;
- : bool = false
# zeroSetDiff([[1;2;3];[1;2;4]],[[1;2;3];[1;2;3]]);;
- : bool = false
# zeroSetDiff([[1;2;3];[1;2;3]],[[1;2;3];[1;2;3]]);;
- : bool = true
# zeroCounts(6);;
- : int list = [0; 0; 0; 0; 0; 0]
# zeroCounts(3);;
- : int list = [0; 0; 0]
# updateCounts(3,zeroCounts(6));;
- : int list = [0; 0; 0; 1; 0; 0]
# updateCounts(3,updateCounts(3,zeroCounts(6)));;
- : int list = [0; 0; 0; 2; 0; 0]
# updateCounts(1,updateCounts(3,updateCounts(3,zeroCounts(6))));;
- : int list = [0; 1; 0; 2; 0; 0]
# updateMeansSum([1.0;2.0;3.0],2,zeroMeansSet(4,3));;
- : float list list =
[[0.; 0.; 0.]; [0.; 0.; 0.]; [1.; 2.; 3.]; [0.; 0.; 0.]]
# updateMeansSum([1.0;2.0;3.0],0,zeroMeansSet(4,3));;
- : float list list =
[[1.; 2.; 3.]; [0.; 0.; 0.]; [0.; 0.; 0.]; [0.; 0.; 0.]]
# updateMeansSum([3.0;2.0;1.0],3,updateMeansSum([1.0;2.0;3.0],0,zeroMeansSet(4,3)));;
- : float list list =
[[1.; 2.; 3.]; [0.; 0.; 0.]; [0.; 0.; 0.]; [3.; 2.; 1.]]
# updateMeansSum([1.0;2.0;3.0],2,updateMeansSum([1.0;2.0;3.0],2,zeroMeansSet(4,3)));;
- : float list list =
[[0.; 0.; 0.]; [0.; 0.; 0.]; [2.; 4.; 6.]; [0.; 0.; 0.]]
# formNewMeans([[100.5];[-29.1]],[3;5]);;
- : float list = [33.5; -5.82]
# formNewMeans([[12.3];[-45.6]],[1;2]);;
- : float list = [12.3; -22.8]
# 









